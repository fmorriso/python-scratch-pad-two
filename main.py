import sys
import colorama

DEFAULT_FOREGROUND_COLOR = colorama.Fore.LIGHTGREEN_EX
DEFAULT_BACKGROUND_COLOR = colorama.Back.BLACK
ERROR_FOREGROUND_COLOR = colorama.Fore.LIGHTWHITE_EX
ERROR_BACKGROUND_COLOR = colorama.Back.LIGHTRED_EX


def increment_primitive_number(n: float | int) -> None:
    """Attempt to increment a primitive number by one which will fail quietly because pyton passes primitives by
    value."""
    n += 1


def increment_number_passed_in_list(lst) -> None:
    """Use a list to gain pass-by-reference access to a number so we can increment it."""
    if lst is None or type(lst) is not list or len(lst) == 0:
        return
    if type(lst[0]) is int or type(lst[0]) is float:
        lst[0] += 1
    else:
        raise TypeError(f'Exception: Cannot increment something in a list that is not an int or float.  '
                        f'You passed in {type(lst[0])}')


def get_python_version() -> str:
    """ the version of python running this program"""
    return f'{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}'


def display_error_message(error: Exception) -> None:
    """Use colorama to display an error message generated by an exception"""
    print(
        f'{ERROR_FOREGROUND_COLOR + ERROR_BACKGROUND_COLOR}{error}{DEFAULT_FOREGROUND_COLOR + DEFAULT_BACKGROUND_COLOR}')


def main():
    # as a primitive (int or float), our method does not affect the value (pass by value)
    n: float = 4.6
    print(f'before, {n =}')
    increment_primitive_number(n)
    print(f'after, {n =}')

    # use the 'trick' of passing the value as a in order to get pass by reference
    n: list[float | int] = [3.14159, ]
    print(f'before, {n =}')
    increment_number_passed_in_list(n)
    print(f'after, {n =}')
    n = n[0]
    print(f'after, {n = }')

    # this should fail
    n: list[str] = ['3.14159', ]
    print(f'before, {n =}')
    error_encountered = None
    try:
        increment_number_passed_in_list(n)
    except Exception as e:
        error_encountered = e
    finally:
        if error_encountered is not None:
            display_error_message(error_encountered)
        print(f'after, {n =}')

    # quizz_question1()


if __name__ == "__main__":
    colorama.init(autoreset = False)
    print(DEFAULT_FOREGROUND_COLOR + DEFAULT_BACKGROUND_COLOR, end = '')

    print(f'Python version: {get_python_version()} plus colorama version: {colorama.__version__}')

    main()
